CREATE DATABASE SUPER_STORE 
SELECT * FROM ORDERS;
ALTER TABLE ORDERS
MODIFY COLUMN ORDER_DATE DATE;
ALTER TABLE ORDERS
MODIFY COLUMN SHIP_DATE DATE;


-- OVERALL VIEW OF SUPERSTORE SALES DATASET --
SELECT
COUNT(ORDER_ID) AS TOTAL_OREDERS,
COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_CUSTOMERS,
COUNT(DISTINCT COUNTRY) AS TOTAL_COUNTRIES,
COUNT(DISTINCT CITY) AS TOTAL_CITIES,
COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS,
COUNT(DISTINCT CATEGORY) AS TOTAL_CATEGORIES,
COUNT(DISTINCT SUB_CATEGORY) AS TOTAL_SUBCATEGORIES,
SUM(SALES) AS TOTAL_SALES,
SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD,
SUM(PROFIT) AS TOTAL_PROFIT,
AVG(DISCOUNT) AS AVG_DISCOUNT
FROM ORDERS;

-- NUMBER OF CUSTOMER BY CATEGORY --
SELECT 
    CATEGORY,    
    COUNT(DISTINCT CUSTOMER_ID) AS COUNT_CUSTOMERS
FROM ORDERS
GROUP BY CATEGORY

-- TOP 50 PRODUCT BY SALES AND QUANTITY --
SELECT
  PRODUCT_NAME,
  CATEGORY,
  SUM(SALES) AS TOTAL_SALES,
  SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD
FROM ORDERS
GROUP BY PRODUCT_NAME, CATEGORY
ORDER BY TOTAL_SALES DESC
LIMIT 50;

-- YEAR WISE SALES --
SELECT
  YEAR(ORDER_DATE) AS YEAR,
  SUM(SALES) AS TOTAL_SALES
FROM ORDERS
GROUP BY YEAR(ORDER_DATE)
ORDER BY TOTAL_SALES DESC;	

-- SUB_CATEGORY WITH SALES MORE THAN 1000000 --
SELECT  SUB_CATEGORY,
       SUM(SALES) AS TOTAL_SALES
FROM ORDERS
GROUP BY  SUB_CATEGORY
HAVING SUM(SALES) > 1000000
ORDER BY TOTAL_SALES DESC;

-- CUSTOMER SEGMENTATION --		
SELECT		
SEGMENT,		
COUNT(DISTINCT CUSTOMER_ID) AS TOATL_CUSTOMERS,		
SUM(SALES) AS TOTAL_SALES		
FROM ORDERS		
GROUP BY SEGMENT		
ORDER BY SUM(SALES) DESC;

-- FIRST AND LAST ORDER OF CUSTOMER --
SELECT
  Customer_ID,
  MIN(ORDER_DATE) AS FIRST_ORDER,
  MAX(ORDER_DATE) AS LAST_ORDER,
  SUM(SALES) AS TOTAL_SALES
FROM ORDERS
GROUP BY CUSTOMER_ID
ORDER BY TOTAL_SALES DESC
LIMIT 10;
				
 -- AVERAGE SHIPPING COST AND TOTAL PROFIT --   
SELECT   
SHIP_MODE,
AVG(SHIPPING_COAST) AS AVG_SHIPPING_COST,
SUM(PROFIT) AS TOTAL_PROFIT
FROM ORDERS
GROUP BY SHIP_MODE
ORDER BY SUM(PROFIT);

-- TIME ANALYSIS --
SELECT
SHIP_MODE,
AVG(DATEDIFF(SHIP_DATE, ORDER_DATE))AS AVG_DAYS_GAP
FROM ORDERS
GROUP BY SHIP_MODE;

-- TOTAL QUANTITY OF PRODUCT --
SELECT 
PRODUCT_NAME,
CATEGORY,
SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD
FROM ORDERS
GROUP BY 
PRODUCT_NAME,
CATEGORY
ORDER BY SUM(QUANTITY) DESC

-- REGIONAL QUANTITY ANALYSIS --
SELECT 
REGION,
CATEGORY,
SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD
FROM ORDERS
GROUP BY REGION,
CATEGORY
ORDER BY SUM(QUANTITY) DESC;

-- COUNTRY WISE SALES ANALYSIS --
SELECT 
CATEGORY,
COUNTRY,
SUM(SALES) AS TOTAL_SALES
FROM ORDERS
GROUP BY  
CATEGORY,
COUNTRY
ORDER BY SUM(SALES) DESC;

--  CUMULATIVE PROFIT OVER CATEGORY --
SELECT
  DATE_FORMAT(ORDER_DATE, '%Y-%m') AS YEAR_AND_MONTH,
  CATEGORY,
  SUM(PROFIT) AS MONTHLY_PROFIT,
  SUM(SUM(PROFIT)) OVER (
    PARTITION BY CATEGORY
    ORDER BY MIN(DATE_FORMAT(ORDER_DATE, '%Y-%m'))
  ) AS CUM_PROFIT
FROM ORDERS
GROUP BY DATE_FORMAT(ORDER_DATE, '%Y-%m'), CATEGORY
ORDER BY CATEGORY, YEAR_AND_MONTH;

-- PRIFIT AND DISCOUNT ANALYSIS--
SELECT
  SUB_CATEGORY,
  ROUND(AVG(DISCOUNT), 2) AS AVG_DISCOUNT,
  ROUND(AVG(PROFIT), 2) AS AVG_PROFIT,
  ROUND(
    (AVG(PROFIT) / NULLIF(AVG(DISCOUNT), 0)),
    2
  ) AS PROFIT_PER_DISCOUNT
FROM ORDERS
GROUP BY SUB_CATEGORY
HAVING AVG(DISCOUNT) > 0
ORDER BY PROFIT_PER_DISCOUNT DESC;

-- TOP 3 PRODUCT BY SALES PER SUB_CATEGORY --
SELECT *
FROM (
  SELECT *,
    ROW_NUMBER() OVER (
      PARTITION BY SUB_CATEGORY
      ORDER BY SALES DESC
    ) AS RN
  FROM ORDERS
) T
WHERE RN <= 3;




